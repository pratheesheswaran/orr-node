{"version":3,"sources":["store/actions/loginAction.js","components/loginComponent/loginComponent.js","components/blogComponent/blogComponent.js","store/actions/postActions.js","components/taskComponent/taskComponent.js","components/homeComponent/homeComponent.js","store/actions/homeAction.js","components/navbarComponent/navBarComponent.js","components/blogDetailsComponent/blogDetailsComponent.js","components/blogEditForm/blogEditForm.js","components/AllPostComponent/allPostComponent.js","App.js","serviceWorker.js","store/reducers/homeReducer.js","store/reducers/loginReducer.js","store/reducers/rootReducer.js","store/sagas/index.js","index.js"],"names":["loginAction","data","console","log","type","payload","LoginComponent","state","email","password","handleSubmit","e","preventDefault","props","loginDispatch","handleChange","setState","target","id","value","prevProps","prevState","login","isLoggedIn","this","onSubmit","className","onChange","onClick","Component","withRouter","connect","dispatch","BlogComponent","isReadMore","blogs","blogsData","length","slice","Fragment","class","map","blog","index","fetchBlogDetail","title","content","isReadMoreFunc","TaskComponent","task","addTask","isDone","addTaskDipatch","setNewTaskData","tasks","placeholder","home","actions","HomeComponent","message","handleClick","history","push","_id","getBlogs","getTasks","tasksData","NavbarComponent","to","href","detailData","find","match","params","goBack","BlogEditForm","savePost","savePostDispatch","setData","App","exact","path","component","BlogDetailsComponent","AllPostComponent","Boolean","window","location","hostname","intialState","homeReducer","action","loginReducer","status","rootReducer","combineReducers","getBlogsSaga","getTaskSaga","postLoginData","postBlogData","addNewTask","postBlogDataSaga","actionWatcher","addNewTaskSaga","rootSaga","axios","get","then","response","result","put","takeLatest","post","json","all","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6a2d2c56.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst loginAction=(data)=> {\n    console.log('loginaction')\nreturn{\n    type:'POSTLOGINSAGA',\n    payload:data\n}\n   \n}\nexport default loginAction","import React, { Component } from 'react';\nimport loginAction from '../../store/actions/loginAction';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport './loginComponent.css'\n\nclass LoginComponent extends Component {\n    state={\n        email:'',\n        password:''\n    }\n\n    handleSubmit=(e)=>{\n        e.preventDefault();\n        console.log('login handle submit')\n        this.props.loginDispatch(this.state);\n    }\n    handleChange=(e)=>{\n        e.preventDefault();\n        this.setState({\n            [e.target.id]:e.target.value\n        })\n    }\n\n    componentDidUpdate(prevProps,prevState){\n        console.log('asdf',prevProps.login.isLoggedIn)\n        console.log('asdf this.prop',this.props.login.isLoggedIn)\n        // if(this.props.login.isLoggedIn){\n        //     this.props.history.push('./home')\n        // }\n    }\n\n    render(){\n        return (\n            <form onSubmit={this.handleSubmit} className='login-container'>\n                <lable>email</lable>\n                <input type=\"email\" id='email' onChange={this.handleChange}></input> <br/>\n                <lable>password</lable>\n                <input type=\"password\" id='password' onChange={this.handleChange}></input>\n               <button onClick={this.handleSubmit}>login</button>\n            </form>\n        )\n    }\n  \n\n}\n\nconst mapStateToPoprs = (state) =>{\n    return {\n        login: state.login\n    }\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        loginDispatch: (data)=>dispatch(loginAction(data))\n    }\n}\n\nexport default withRouter(connect(mapStateToPoprs,mapDispatchToProps)(LoginComponent));\n","import React from 'react';\nimport './blogComponent.css'\n\nexport function BlogComponent(props){\n  console.log(\"blogsdata\", props)\n  let data = null;\n  if(!props.isReadMore){\n    data = props && props.blogs && props.blogs.blogsData && props.blogs.blogsData.length > 0 && props.blogs.blogsData.slice(0,3);\n  } else {\n    data = props && props.blogs && props.blogs.blogsData && props.blogs.blogsData.length > 0 && props.blogs.blogsData\n  }\n  return (\n    <React.Fragment>\n      <div className=\"scew-container\">\n      <div class=\"blog-container\">\n        <ul>\n          {data && data.length>0 && data.map((blog, index) => {\n            return (\n              <div onClick={()=>props.fetchBlogDetail(blog)}>\n              <li>\n                <h2>{blog.title}</h2>\n                <p>{blog.content}</p>\n              </li>\n              </div>\n            )\n          }\n          )}\n        </ul>\n        <p class=\"read-more\" onClick={props.isReadMoreFunc}>{!props.isReadMore?'Read more':''}</p>\n      </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\n","export const savePostAction=(data)=>{\n    return {\n        type:'POSTBLOGPOST',\n        payload:data\n    }\n}\n\nexport const addTaskAction=(data)=>{\n    return {\n        type:'ADDNEWTASK',\n        payload:data\n\n    }\n}\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/postActions';\nimport './taskComponent.css'\n\nclass TaskComponent extends Component {\n  state={\n    task:'',\n  }\n  addTask=(e)=>{\n    e.preventDefault();\n    let data = {\n      task:this.state.task,\n      isDone:false\n    }\n    this.props.addTaskDipatch(data);\n  }\n  setNewTaskData=(e)=>{\n    e.preventDefault();\n    this.setState({[e.target.id]:e.target.value})\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"task-container\">\n        {this.props && this.props.tasks && this.props.tasks.length > 0 && this.props.tasks.map((tasks, index) => {\n          return (\n           \n              <p>{tasks.task}</p>\n          )\n        })\n        }\n        <form className=\"addtask-form\">\n          <input type='text' id='task' onChange={this.setNewTaskData} placeholder='   Add taks'></input>\n          <button onClick={this.addTask}>Add</button>\n        </form>\n        </div>\n      </React.Fragment>\n    )\n\n\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n      home: state.home,\n      login: state.login\n  }\n\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addTaskDipatch:(data)=>dispatch(actions.addTaskAction(data))\n\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskComponent);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport loginAction from '../../store/actions/loginAction';\nimport * as homeActions from '../../store/actions/homeAction'\nimport { BlogComponent } from \"../blogComponent/blogComponent\";\nimport TaskComponent from \"../taskComponent/taskComponent\";\nimport './homeComponent.css'\n\nclass HomeComponent extends Component {\n    state = {\n        message: '',\n        blogsData: {},\n        isReadMore: false\n    }\n    componentDidMount() {\n        // if(this.props.login.isLoggedIn){\n        //     console.log('user is logged in')\n        // }else {\n        //     console.log('no user found')\n        //     this.props.history.push('/login')\n        // }\n        this.props.getBlogs();\n        this.props.getTasks();\n    }\n    handleClick = () => {\n        // this.props.loginDispatch()\n\n    }\n    componentDidUpdate() {\n        console.log('sss', this.props.home.blogsData)\n        // this.setState({blogsData:this.props.home.blogsData})\n        // this.props.getBlogs();\n\n    }\n    fetchBlogDetail = (blog) => {\n        console.log('fetching blog detail functioncalled', blog)\n        this.props.history.push(`/blog-detail/${blog._id}`)\n    }\n\n    isReadMore=()=>{\n        this.setState({isReadMore:!this.state.isReadMore},()=>{\n            if(this.state.isReadMore){\n                this.props.history.push('/all-post')\n            }\n        })\n    }\n    render() {\n        console.log('home reducer', this.props.home)\n        return (\n            <div className=\"home-container\">\n\n                <h1 className=\"title-right blog-text\" onClick={() => { this.props.history.push('./add-post') }}>Blog</h1>\n                <BlogComponent blogs={this.props.home} fetchBlogDetail={(blog) => this.fetchBlogDetail(blog)} isReadMoreFunc={this.isReadMore} isReadMore={this.state.isReadMore}/>\n                <h1 className=\"title-right task-text\">Tasks</h1>\n                <TaskComponent tasks={this.props.home.tasksData} />\n\n            </div>\n\n        )\n    }\n\n}\nconst mapStateToProps = (state) => {\n    return {\n        home: state.home,\n        login: state.login\n    }\n\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        loginDispatch: () => dispatch(loginAction()),\n        getBlogs: () => dispatch(homeActions.getBlogs()),\n        getTasks: () => dispatch(homeActions.getTasks())\n\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(HomeComponent));\n","export const getBlogs=()=>{\n    return{\n        type:'GETBLOGS',\n        payload:null\n    }\n}\nexport const getTasks=()=>{\n    return{\n        type:'GETTASKS',\n        payload:null\n    }\n}\n\n","import React from 'react';\nimport './navbarComponent.css'\nimport { Link } from 'react-router-dom';\n\nexport default function NavbarComponent() {\n    return (\n       <div className=\"nav-container container\">\n           {/* <img className=\"header-img\"></img> */}\n           <Link to='/'><h1>Orr</h1></Link>  \n           <ul>\n               <li>\n                 <Link to='/'>Home</Link>  \n                 \n               </li>\n               <li>\n                   <a href=\"#\">Admin</a>\n               </li>\n           </ul>\n       </div>\n    )\n\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport './blogDetailsComponent.css'\n\nfunction BlogDetailsComponent(props) {\n    console.log('props', props)\n    let renderDetails = false;\n    let detailData = null;\n    const isDataAvailable = props && props.home && props.home.blogsData && props.home.blogsData.length > 0 ? true : false;\n    if (isDataAvailable) {\n        renderDetails = true;\n        detailData = props.home.blogsData.find(blog => blog._id === props.match.params.id)\n        console.log('detailData', detailData)\n    }\n    return (\n        <div className=\"boot-container\">\n            <h1>{detailData.title}</h1>\n            <p>{detailData.content}</p>\n            <div className='edit-btn'>\n                <p>Edit</p>\n                <p onClick={()=>props.history.goBack()}>Back</p>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        home: state.home,\n    }\n\n}\n\nexport default connect(mapStateToProps)(BlogDetailsComponent)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/postActions'\nimport { withRouter } from 'react-router';\nimport { BlogComponent } from '../blogComponent/blogComponent';\nimport './blogEditForm.css'\n\nclass BlogEditForm extends Component {\n    state = {\n        title: '',\n        content: ''\n    }\n    savePost = (e) => {\n        e.preventDefault();\n        let data = {\n            title: this.state.title,\n            content: this.state.content\n        }\n        this.props.savePostDispatch(data)\n    }\n    setData = (e) => {\n        e.preventDefault();\n        this.setState({ [e.target.id]: e.target.value })\n    }\n    componentDidUpdate(prevProps, prevState) {\n        // if(prevProps.someValue!==this.props.someValue){\n\n        // }\n        console.log('preprob', prevProps)\n        console.log('prevstate', prevState)\n        console.log('this.prps', this.props)\n        if (prevProps.home !== this.props.home) {\n            console.log('redirect to home')\n            this.props.history.push('./')\n        }\n    }\n\n    fetchBlogDetail = (blog) => {\n        console.log('fetching blog detail functioncalled', blog)\n        this.props.history.push(`/blog-detail/${blog._id}`)\n    }\n    render() {\n        return (\n            <div className=\"boot-container blogEdit-container\">\n                <form>\n                    <h1>Title</h1>\n                    <input type='text' id='title' onChange={(e) => this.setData(e)}></input>\n                    <h1>Content</h1>\n                    <textarea onChange={(e) => this.setData(e)} id='content'></textarea>\n                    <div class=\"save-btn\">\n                        <button onClick={this.savePost}>save </button>\n                    </div>\n                </form>\n                <BlogComponent blogs={this.props.home} fetchBlogDetail={(blog) => this.fetchBlogDetail(blog)} isReadMore={false}/>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        home: state.home\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        savePostDispatch: (data) => dispatch(actions.savePostAction(data))\n    }\n}\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(BlogEditForm));\n","import React from 'react'\nimport { BlogComponent } from '../blogComponent/blogComponent'\nimport { connect } from 'react-redux'\n\nfunction AllPostComponent(props) {\n    function fetchBlogDetail(blog){\n        console.log('fetching blog detail functioncalled', blog)\n        this.props.history.push(`/blog-detail/${blog._id}`)\n    }\n\n    return (\n        <div className=\"boot-container\">\n            <BlogComponent blogs={props.home} fetchBlogDetail={(blog) => fetchBlogDetail(blog)} isReadMore={true}/>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        home: state.home,\n    }\n\n}\n\nexport default connect(mapStateToProps)(AllPostComponent);","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport LoginComponent from './components/loginComponent/loginComponent';\nimport HomeComponent from './components/homeComponent/homeComponent';\nimport NavbarComponent from './components/navbarComponent/navBarComponent'\nimport loginAction from '../src/store/actions/loginAction';\nimport { connect } from 'react-redux';\nimport BlogDetailsComponent from './components/blogDetailsComponent/blogDetailsComponent';\nimport BlogEditForm from './components/blogEditForm/blogEditForm';\nimport AllPostComponent from './components/AllPostComponent/allPostComponent';\n\nclass App extends Component {\n  // componentDidMount(){\n  //   this.props.loginDispatch();\n  // }\n  render(){\n    return(\n      <React.Fragment>\n        \n       <BrowserRouter>\n       <NavbarComponent/>\n          <Switch>\n            <Route exact path='/' component={HomeComponent}/>  \n            <Route path='/login' component={LoginComponent}/>\n            <Route path='/home' component={LoginComponent}/>\n            <Route path='/blog-detail/:id' component={BlogDetailsComponent}/>\n            <Route path='/add-post' component={BlogEditForm}/>\n            <Route path='/all-post' component={AllPostComponent}/>\n          </Switch>\n       </BrowserRouter>\n      </React.Fragment>\n    )\n  }\n}\nconst mapDispatchToProps = (dispatch)=> {\n  return {\n    loginDispatch: ()=>dispatch(loginAction())\n  }\n}\nexport default connect(null,mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const intialState = {\n    blogsData:{},\n    message:'',\n    tasksData:{}\n}\nconst homeReducer=(state=intialState, action)=> {\n    switch(action.type){\n        case 'SUCCESS':\n            console.log('home reducer state change from success case')\n\n            return {\n                ...state,\n                message:action.payload\n            }\n        case 'GETBLOGSUCCESS':\n            return {\n                ...state,\n                blogsData:action.payload\n            }\n        case 'GETTASKSSUCCESS':\n            return {\n                ...state,\n                tasksData:action.payload\n            }\n        default:\n            return state;\n    }\n}\nexport default homeReducer;","const intialState = {\n    isLoggedIn:false\n}\nconst loginReducer=(state=intialState, action)=> {\n    switch(action.type){\n        case 'LOGINDATARECEIVED':\n            console.log('LOGINDATARECEIVED',action.payload)\n            return {\n                ...state,\n                isLoggedIn:action.payload.status\n            }\n        default:\n            return state;\n    }\n}\nexport default loginReducer;","import { combineReducers } from \"redux\";\nimport homeReducer from './homeReducer'\nimport loginReducer from \"./loginReducer\";\n\nconst rootReducer =  combineReducers({\n    home: homeReducer,\n    login:loginReducer\n})\n\nexport default rootReducer;","import { put, takeLatest, all } from 'redux-saga/effects';\nimport axios from 'axios'\n\nfunction* getBlogs(){\n  const result = yield axios.get('https://randomriffs.herokuapp.com/api/blogs')\n  .then(response=>{\n    return response.data\n  })\n\n  yield put({type:'GETBLOGSUCCESS',payload:result})\n}\n\nfunction* getTasks(){\n  const result = yield axios.get('https://randomriffs.herokuapp.com/api/tasks')\n  .then(response=>{\n    return response.data\n  })\n\n  yield put({type:'GETTASKSSUCCESS',payload:result})\n}\n\nfunction* getBlogsSaga(){\n  yield takeLatest('GETBLOGS',getBlogs)\n}\n\nfunction* getTaskSaga(){\n    yield takeLatest('GETTASKS',getTasks)\n}\n\n\nfunction* postLoginData(data) {\n  console.log('get loign from  saga')\n  const json = yield axios.post('https://randomriffs.herokuapp.com/api/login',data.payload).\n  then(response => {\n   return response.data\n  });    \n\n  yield put({ type: \"LOGINDATARECEIVED\", payload: json });\n\n}\n\nfunction* postBlogData(data) {\n  console.log('posting blog new post to server',data)\n  const json = yield axios.post('https://randomriffs.herokuapp.com/api/add-post',data.payload).\n  then(response => {\n   return response.data\n  });    \n  console.log('json', json)\n  \n  yield put({ type: \"GETBLOGSUCCESS\", payload: json });\n\n}\nfunction* addNewTask(data) {\n  console.log('posting blog new post to server',data)\n  const json = yield axios.post('https://randomriffs.herokuapp.com/api/add-task',data.payload).\n  then(response => {\n   return response.data\n  });    \n  console.log('json', json)\n  \n  yield put({ type: \"GETTASKSSUCCESS\", payload: json });\n\n}\n\n\nfunction* postBlogDataSaga(){\n    yield takeLatest('POSTBLOGPOST',postBlogData)\n}\n\n\nfunction* actionWatcher() {\n  yield takeLatest('POSTLOGINSAGA', postLoginData)\n}\nfunction* addNewTaskSaga() {\n  yield takeLatest('ADDNEWTASK', addNewTask)\n}\n\n\nexport default function* rootSaga() {\n  yield all([\n  actionWatcher(),\n  getBlogsSaga(),\n  getTaskSaga(),\n  postBlogDataSaga(),\n  addNewTaskSaga()\n  ]);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './store/reducers/rootReducer'\nimport { Provider } from 'react-redux';\nimport rootSaga from './store/sagas/index'\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware))\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}